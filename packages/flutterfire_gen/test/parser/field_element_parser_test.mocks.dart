// Mocks generated by Mockito 5.4.6 from annotations
// in flutterfire_gen/test/parser/field_element_parser_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:analyzer/dart/constant/value.dart' as _i5;
import 'package:analyzer/dart/element/element.dart' as _i2;
import 'package:analyzer/dart/element/nullability_suffix.dart' as _i6;
import 'package:analyzer/dart/element/type.dart' as _i3;
import 'package:analyzer/dart/element/type_visitor.dart' as _i7;
import 'package:analyzer/src/dart/element/inheritance_manager3.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:source_gen/src/type_checker.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeFieldElement_0 extends _i1.SmartFake implements _i2.FieldElement {
  _FakeFieldElement_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInstanceElement_1 extends _i1.SmartFake
    implements _i2.InstanceElement {
  _FakeInstanceElement_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFieldFragment_2 extends _i1.SmartFake implements _i2.FieldFragment {
  _FakeFieldFragment_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLibraryElement_3 extends _i1.SmartFake
    implements _i2.LibraryElement {
  _FakeLibraryElement_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDartType_4 extends _i1.SmartFake implements _i3.DartType {
  _FakeDartType_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElementKind_5 extends _i1.SmartFake implements _i2.ElementKind {
  _FakeElementKind_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMetadata_6 extends _i1.SmartFake implements _i2.Metadata {
  _FakeMetadata_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElement_7 extends _i1.SmartFake implements _i2.Element {
  _FakeElement_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLibraryFragment_8 extends _i1.SmartFake
    implements _i2.LibraryFragment {
  _FakeLibraryFragment_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClassFragment_9 extends _i1.SmartFake implements _i2.ClassFragment {
  _FakeClassFragment_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterfaceType_10 extends _i1.SmartFake implements _i3.InterfaceType {
  _FakeInterfaceType_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterfaceElement_11 extends _i1.SmartFake
    implements _i2.InterfaceElement {
  _FakeInterfaceElement_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FieldElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockFieldElement extends _i1.Mock implements _i2.FieldElement {
  MockFieldElement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FieldElement get baseElement => (super.noSuchMethod(
        Invocation.getter(#baseElement),
        returnValue: _FakeFieldElement_0(
          this,
          Invocation.getter(#baseElement),
        ),
      ) as _i2.FieldElement);

  @override
  _i2.InstanceElement get enclosingElement => (super.noSuchMethod(
        Invocation.getter(#enclosingElement),
        returnValue: _FakeInstanceElement_1(
          this,
          Invocation.getter(#enclosingElement),
        ),
      ) as _i2.InstanceElement);

  @override
  _i2.InstanceElement get enclosingElement2 => (super.noSuchMethod(
        Invocation.getter(#enclosingElement2),
        returnValue: _FakeInstanceElement_1(
          this,
          Invocation.getter(#enclosingElement2),
        ),
      ) as _i2.InstanceElement);

  @override
  _i2.FieldFragment get firstFragment => (super.noSuchMethod(
        Invocation.getter(#firstFragment),
        returnValue: _FakeFieldFragment_2(
          this,
          Invocation.getter(#firstFragment),
        ),
      ) as _i2.FieldFragment);

  @override
  List<_i2.FieldFragment> get fragments => (super.noSuchMethod(
        Invocation.getter(#fragments),
        returnValue: <_i2.FieldFragment>[],
      ) as List<_i2.FieldFragment>);

  @override
  bool get isAbstract => (super.noSuchMethod(
        Invocation.getter(#isAbstract),
        returnValue: false,
      ) as bool);

  @override
  bool get isCovariant => (super.noSuchMethod(
        Invocation.getter(#isCovariant),
        returnValue: false,
      ) as bool);

  @override
  bool get isEnumConstant => (super.noSuchMethod(
        Invocation.getter(#isEnumConstant),
        returnValue: false,
      ) as bool);

  @override
  bool get isExternal => (super.noSuchMethod(
        Invocation.getter(#isExternal),
        returnValue: false,
      ) as bool);

  @override
  bool get isPromotable => (super.noSuchMethod(
        Invocation.getter(#isPromotable),
        returnValue: false,
      ) as bool);

  @override
  bool get hasInitializer => (super.noSuchMethod(
        Invocation.getter(#hasInitializer),
        returnValue: false,
      ) as bool);

  @override
  _i2.LibraryElement get library => (super.noSuchMethod(
        Invocation.getter(#library),
        returnValue: _FakeLibraryElement_3(
          this,
          Invocation.getter(#library),
        ),
      ) as _i2.LibraryElement);

  @override
  _i2.LibraryElement get library2 => (super.noSuchMethod(
        Invocation.getter(#library2),
        returnValue: _FakeLibraryElement_3(
          this,
          Invocation.getter(#library2),
        ),
      ) as _i2.LibraryElement);

  @override
  bool get hasImplicitType => (super.noSuchMethod(
        Invocation.getter(#hasImplicitType),
        returnValue: false,
      ) as bool);

  @override
  bool get isConst => (super.noSuchMethod(
        Invocation.getter(#isConst),
        returnValue: false,
      ) as bool);

  @override
  bool get isFinal => (super.noSuchMethod(
        Invocation.getter(#isFinal),
        returnValue: false,
      ) as bool);

  @override
  bool get isLate => (super.noSuchMethod(
        Invocation.getter(#isLate),
        returnValue: false,
      ) as bool);

  @override
  bool get isStatic => (super.noSuchMethod(
        Invocation.getter(#isStatic),
        returnValue: false,
      ) as bool);

  @override
  _i3.DartType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _FakeDartType_4(
          this,
          Invocation.getter(#type),
        ),
      ) as _i3.DartType);

  @override
  List<_i2.Element> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i2.Element>[],
      ) as List<_i2.Element>);

  @override
  List<_i2.Element> get children2 => (super.noSuchMethod(
        Invocation.getter(#children2),
        returnValue: <_i2.Element>[],
      ) as List<_i2.Element>);

  @override
  String get displayName => (super.noSuchMethod(
        Invocation.getter(#displayName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#displayName),
        ),
      ) as String);

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);

  @override
  bool get isPrivate => (super.noSuchMethod(
        Invocation.getter(#isPrivate),
        returnValue: false,
      ) as bool);

  @override
  bool get isPublic => (super.noSuchMethod(
        Invocation.getter(#isPublic),
        returnValue: false,
      ) as bool);

  @override
  bool get isSynthetic => (super.noSuchMethod(
        Invocation.getter(#isSynthetic),
        returnValue: false,
      ) as bool);

  @override
  _i2.ElementKind get kind => (super.noSuchMethod(
        Invocation.getter(#kind),
        returnValue: _FakeElementKind_5(
          this,
          Invocation.getter(#kind),
        ),
      ) as _i2.ElementKind);

  @override
  _i2.Metadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeMetadata_6(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i2.Metadata);

  @override
  _i2.Element get nonSynthetic => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic),
        returnValue: _FakeElement_7(
          this,
          Invocation.getter(#nonSynthetic),
        ),
      ) as _i2.Element);

  @override
  _i2.Element get nonSynthetic2 => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic2),
        returnValue: _FakeElement_7(
          this,
          Invocation.getter(#nonSynthetic2),
        ),
      ) as _i2.Element);

  @override
  _i2.Metadata get metadata2 => (super.noSuchMethod(
        Invocation.getter(#metadata2),
        returnValue: _FakeMetadata_6(
          this,
          Invocation.getter(#metadata2),
        ),
      ) as _i2.Metadata);

  @override
  T? accept<T>(_i2.ElementVisitor2<T>? visitor) =>
      (super.noSuchMethod(Invocation.method(
        #accept,
        [visitor],
      )) as T?);

  @override
  T? accept2<T>(_i2.ElementVisitor2<T>? visitor) =>
      (super.noSuchMethod(Invocation.method(
        #accept2,
        [visitor],
      )) as T?);

  @override
  String displayString({
    bool? multiline = false,
    bool? preferTypeAlias = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #displayString,
          [],
          {
            #multiline: multiline,
            #preferTypeAlias: preferTypeAlias,
          },
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #displayString,
            [],
            {
              #multiline: multiline,
              #preferTypeAlias: preferTypeAlias,
            },
          ),
        ),
      ) as String);

  @override
  String displayString2({
    bool? multiline = false,
    bool? preferTypeAlias = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #displayString2,
          [],
          {
            #multiline: multiline,
            #preferTypeAlias: preferTypeAlias,
          },
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #displayString2,
            [],
            {
              #multiline: multiline,
              #preferTypeAlias: preferTypeAlias,
            },
          ),
        ),
      ) as String);

  @override
  String getExtendedDisplayName({String? shortName}) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName,
          [],
          {#shortName: shortName},
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getExtendedDisplayName,
            [],
            {#shortName: shortName},
          ),
        ),
      ) as String);

  @override
  String getExtendedDisplayName2({String? shortName}) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName2,
          [],
          {#shortName: shortName},
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getExtendedDisplayName2,
            [],
            {#shortName: shortName},
          ),
        ),
      ) as String);

  @override
  bool isAccessibleIn(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAccessibleIn2(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn2,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.Element? thisOrAncestorMatching(bool Function(_i2.Element)? predicate) =>
      (super.noSuchMethod(Invocation.method(
        #thisOrAncestorMatching,
        [predicate],
      )) as _i2.Element?);

  @override
  _i2.Element? thisOrAncestorMatching2(bool Function(_i2.Element)? predicate) =>
      (super.noSuchMethod(Invocation.method(
        #thisOrAncestorMatching2,
        [predicate],
      )) as _i2.Element?);

  @override
  void visitChildren<T>(_i2.ElementVisitor2<T>? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildren,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildren2<T>(_i2.ElementVisitor2<T>? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildren2,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ElementAnnotation].
///
/// See the documentation for Mockito's code generation for more information.
class MockElementAnnotation extends _i1.Mock implements _i2.ElementAnnotation {
  MockElementAnnotation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAlwaysThrows => (super.noSuchMethod(
        Invocation.getter(#isAlwaysThrows),
        returnValue: false,
      ) as bool);

  @override
  bool get isAwaitNotRequired => (super.noSuchMethod(
        Invocation.getter(#isAwaitNotRequired),
        returnValue: false,
      ) as bool);

  @override
  bool get isDeprecated => (super.noSuchMethod(
        Invocation.getter(#isDeprecated),
        returnValue: false,
      ) as bool);

  @override
  bool get isDoNotStore => (super.noSuchMethod(
        Invocation.getter(#isDoNotStore),
        returnValue: false,
      ) as bool);

  @override
  bool get isDoNotSubmit => (super.noSuchMethod(
        Invocation.getter(#isDoNotSubmit),
        returnValue: false,
      ) as bool);

  @override
  bool get isExperimental => (super.noSuchMethod(
        Invocation.getter(#isExperimental),
        returnValue: false,
      ) as bool);

  @override
  bool get isFactory => (super.noSuchMethod(
        Invocation.getter(#isFactory),
        returnValue: false,
      ) as bool);

  @override
  bool get isImmutable => (super.noSuchMethod(
        Invocation.getter(#isImmutable),
        returnValue: false,
      ) as bool);

  @override
  bool get isInternal => (super.noSuchMethod(
        Invocation.getter(#isInternal),
        returnValue: false,
      ) as bool);

  @override
  bool get isIsTest => (super.noSuchMethod(
        Invocation.getter(#isIsTest),
        returnValue: false,
      ) as bool);

  @override
  bool get isIsTestGroup => (super.noSuchMethod(
        Invocation.getter(#isIsTestGroup),
        returnValue: false,
      ) as bool);

  @override
  bool get isJS => (super.noSuchMethod(
        Invocation.getter(#isJS),
        returnValue: false,
      ) as bool);

  @override
  bool get isLiteral => (super.noSuchMethod(
        Invocation.getter(#isLiteral),
        returnValue: false,
      ) as bool);

  @override
  bool get isMustBeConst => (super.noSuchMethod(
        Invocation.getter(#isMustBeConst),
        returnValue: false,
      ) as bool);

  @override
  bool get isMustBeOverridden => (super.noSuchMethod(
        Invocation.getter(#isMustBeOverridden),
        returnValue: false,
      ) as bool);

  @override
  bool get isMustCallSuper => (super.noSuchMethod(
        Invocation.getter(#isMustCallSuper),
        returnValue: false,
      ) as bool);

  @override
  bool get isNonVirtual => (super.noSuchMethod(
        Invocation.getter(#isNonVirtual),
        returnValue: false,
      ) as bool);

  @override
  bool get isOptionalTypeArgs => (super.noSuchMethod(
        Invocation.getter(#isOptionalTypeArgs),
        returnValue: false,
      ) as bool);

  @override
  bool get isOverride => (super.noSuchMethod(
        Invocation.getter(#isOverride),
        returnValue: false,
      ) as bool);

  @override
  bool get isProtected => (super.noSuchMethod(
        Invocation.getter(#isProtected),
        returnValue: false,
      ) as bool);

  @override
  bool get isProxy => (super.noSuchMethod(
        Invocation.getter(#isProxy),
        returnValue: false,
      ) as bool);

  @override
  bool get isRedeclare => (super.noSuchMethod(
        Invocation.getter(#isRedeclare),
        returnValue: false,
      ) as bool);

  @override
  bool get isReopen => (super.noSuchMethod(
        Invocation.getter(#isReopen),
        returnValue: false,
      ) as bool);

  @override
  bool get isRequired => (super.noSuchMethod(
        Invocation.getter(#isRequired),
        returnValue: false,
      ) as bool);

  @override
  bool get isSealed => (super.noSuchMethod(
        Invocation.getter(#isSealed),
        returnValue: false,
      ) as bool);

  @override
  bool get isTarget => (super.noSuchMethod(
        Invocation.getter(#isTarget),
        returnValue: false,
      ) as bool);

  @override
  bool get isUseResult => (super.noSuchMethod(
        Invocation.getter(#isUseResult),
        returnValue: false,
      ) as bool);

  @override
  bool get isVisibleForOverriding => (super.noSuchMethod(
        Invocation.getter(#isVisibleForOverriding),
        returnValue: false,
      ) as bool);

  @override
  bool get isVisibleForTemplate => (super.noSuchMethod(
        Invocation.getter(#isVisibleForTemplate),
        returnValue: false,
      ) as bool);

  @override
  bool get isVisibleForTesting => (super.noSuchMethod(
        Invocation.getter(#isVisibleForTesting),
        returnValue: false,
      ) as bool);

  @override
  bool get isVisibleOutsideTemplate => (super.noSuchMethod(
        Invocation.getter(#isVisibleOutsideTemplate),
        returnValue: false,
      ) as bool);

  @override
  bool get isWidgetFactory => (super.noSuchMethod(
        Invocation.getter(#isWidgetFactory),
        returnValue: false,
      ) as bool);

  @override
  _i2.LibraryFragment get libraryFragment => (super.noSuchMethod(
        Invocation.getter(#libraryFragment),
        returnValue: _FakeLibraryFragment_8(
          this,
          Invocation.getter(#libraryFragment),
        ),
      ) as _i2.LibraryFragment);

  @override
  String toSource() => (super.noSuchMethod(
        Invocation.method(
          #toSource,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #toSource,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [DartObject].
///
/// See the documentation for Mockito's code generation for more information.
class MockDartObject extends _i1.Mock implements _i5.DartObject {
  MockDartObject() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasKnownValue => (super.noSuchMethod(
        Invocation.getter(#hasKnownValue),
        returnValue: false,
      ) as bool);

  @override
  bool get isNull => (super.noSuchMethod(
        Invocation.getter(#isNull),
        returnValue: false,
      ) as bool);

  @override
  _i5.DartObject? getField(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getField,
        [name],
      )) as _i5.DartObject?);
}

/// A class which mocks [DartType].
///
/// See the documentation for Mockito's code generation for more information.
class MockDartType extends _i1.Mock implements _i3.DartType {
  MockDartType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DartType get extensionTypeErasure => (super.noSuchMethod(
        Invocation.getter(#extensionTypeErasure),
        returnValue: _FakeDartType_4(
          this,
          Invocation.getter(#extensionTypeErasure),
        ),
      ) as _i3.DartType);

  @override
  bool get isBottom => (super.noSuchMethod(
        Invocation.getter(#isBottom),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncFuture => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFuture),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncFutureOr => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFutureOr),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncStream => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncStream),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreBool => (super.noSuchMethod(
        Invocation.getter(#isDartCoreBool),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreDouble => (super.noSuchMethod(
        Invocation.getter(#isDartCoreDouble),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreEnum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreEnum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreFunction => (super.noSuchMethod(
        Invocation.getter(#isDartCoreFunction),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreInt => (super.noSuchMethod(
        Invocation.getter(#isDartCoreInt),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreIterable => (super.noSuchMethod(
        Invocation.getter(#isDartCoreIterable),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreList => (super.noSuchMethod(
        Invocation.getter(#isDartCoreList),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreMap => (super.noSuchMethod(
        Invocation.getter(#isDartCoreMap),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreNull => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNull),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreNum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreObject => (super.noSuchMethod(
        Invocation.getter(#isDartCoreObject),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreRecord => (super.noSuchMethod(
        Invocation.getter(#isDartCoreRecord),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreSet => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSet),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreString => (super.noSuchMethod(
        Invocation.getter(#isDartCoreString),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreSymbol => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSymbol),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreType => (super.noSuchMethod(
        Invocation.getter(#isDartCoreType),
        returnValue: false,
      ) as bool);

  @override
  _i6.NullabilitySuffix get nullabilitySuffix => (super.noSuchMethod(
        Invocation.getter(#nullabilitySuffix),
        returnValue: _i6.NullabilitySuffix.question,
      ) as _i6.NullabilitySuffix);

  @override
  R accept<R>(_i7.TypeVisitor<R>? visitor) => (super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValue: _i4.dummyValue<R>(
          this,
          Invocation.method(
            #accept,
            [visitor],
          ),
        ),
      ) as R);

  @override
  R acceptWithArgument<R, A>(
    _i7.TypeVisitorWithArgument<R, A>? visitor,
    A? argument,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptWithArgument,
          [
            visitor,
            argument,
          ],
        ),
        returnValue: _i4.dummyValue<R>(
          this,
          Invocation.method(
            #acceptWithArgument,
            [
              visitor,
              argument,
            ],
          ),
        ),
      ) as R);

  @override
  _i3.InterfaceType? asInstanceOf(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf,
        [element],
      )) as _i3.InterfaceType?);

  @override
  _i3.InterfaceType? asInstanceOf2(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf2,
        [element],
      )) as _i3.InterfaceType?);

  @override
  String getDisplayString({bool? withNullability = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {#withNullability: withNullability},
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayString,
            [],
            {#withNullability: withNullability},
          ),
        ),
      ) as String);
}

/// A class which mocks [TypeChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockTypeChecker extends _i1.Mock implements _i8.TypeChecker {
  MockTypeChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DartObject? firstAnnotationOf(
    Object? element, {
    bool? throwOnUnresolved = true,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #firstAnnotationOf,
        [element],
        {#throwOnUnresolved: throwOnUnresolved},
      )) as _i5.DartObject?);

  @override
  bool hasAnnotationOf(
    _i2.Element? element, {
    bool? throwOnUnresolved = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasAnnotationOf,
          [element],
          {#throwOnUnresolved: throwOnUnresolved},
        ),
        returnValue: false,
      ) as bool);

  @override
  _i5.DartObject? firstAnnotationOfExact(
    _i2.Element? element, {
    bool? throwOnUnresolved = true,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #firstAnnotationOfExact,
        [element],
        {#throwOnUnresolved: throwOnUnresolved},
      )) as _i5.DartObject?);

  @override
  bool hasAnnotationOfExact(
    _i2.Element? element, {
    bool? throwOnUnresolved = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasAnnotationOfExact,
          [element],
          {#throwOnUnresolved: throwOnUnresolved},
        ),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i5.DartObject> annotationsOf(
    Object? element, {
    bool? throwOnUnresolved = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #annotationsOf,
          [element],
          {#throwOnUnresolved: throwOnUnresolved},
        ),
        returnValue: <_i5.DartObject>[],
      ) as Iterable<_i5.DartObject>);

  @override
  Iterable<_i5.DartObject> annotationsOfExact(
    _i2.Element? element, {
    bool? throwOnUnresolved = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #annotationsOfExact,
          [element],
          {#throwOnUnresolved: throwOnUnresolved},
        ),
        returnValue: <_i5.DartObject>[],
      ) as Iterable<_i5.DartObject>);

  @override
  bool isAssignableFrom(_i2.Element? element) => (super.noSuchMethod(
        Invocation.method(
          #isAssignableFrom,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAssignableFromType(_i3.DartType? staticType) => (super.noSuchMethod(
        Invocation.method(
          #isAssignableFromType,
          [staticType],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isExactly(_i2.Element? element) => (super.noSuchMethod(
        Invocation.method(
          #isExactly,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isExactlyType(_i3.DartType? staticType) => (super.noSuchMethod(
        Invocation.method(
          #isExactlyType,
          [staticType],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isSuperOf(_i2.Element? element) => (super.noSuchMethod(
        Invocation.method(
          #isSuperOf,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isSuperTypeOf(_i3.DartType? staticType) => (super.noSuchMethod(
        Invocation.method(
          #isSuperTypeOf,
          [staticType],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ClassElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassElement extends _i1.Mock implements _i2.ClassElement {
  MockClassElement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ClassFragment get firstFragment => (super.noSuchMethod(
        Invocation.getter(#firstFragment),
        returnValue: _FakeClassFragment_9(
          this,
          Invocation.getter(#firstFragment),
        ),
      ) as _i2.ClassFragment);

  @override
  List<_i2.ClassFragment> get fragments => (super.noSuchMethod(
        Invocation.getter(#fragments),
        returnValue: <_i2.ClassFragment>[],
      ) as List<_i2.ClassFragment>);

  @override
  bool get hasNonFinalField => (super.noSuchMethod(
        Invocation.getter(#hasNonFinalField),
        returnValue: false,
      ) as bool);

  @override
  bool get isAbstract => (super.noSuchMethod(
        Invocation.getter(#isAbstract),
        returnValue: false,
      ) as bool);

  @override
  bool get isBase => (super.noSuchMethod(
        Invocation.getter(#isBase),
        returnValue: false,
      ) as bool);

  @override
  bool get isConstructable => (super.noSuchMethod(
        Invocation.getter(#isConstructable),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreEnum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreEnum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreObject => (super.noSuchMethod(
        Invocation.getter(#isDartCoreObject),
        returnValue: false,
      ) as bool);

  @override
  bool get isExhaustive => (super.noSuchMethod(
        Invocation.getter(#isExhaustive),
        returnValue: false,
      ) as bool);

  @override
  bool get isExtendableOutside => (super.noSuchMethod(
        Invocation.getter(#isExtendableOutside),
        returnValue: false,
      ) as bool);

  @override
  bool get isFinal => (super.noSuchMethod(
        Invocation.getter(#isFinal),
        returnValue: false,
      ) as bool);

  @override
  bool get isImplementableOutside => (super.noSuchMethod(
        Invocation.getter(#isImplementableOutside),
        returnValue: false,
      ) as bool);

  @override
  bool get isInterface => (super.noSuchMethod(
        Invocation.getter(#isInterface),
        returnValue: false,
      ) as bool);

  @override
  bool get isMixableOutside => (super.noSuchMethod(
        Invocation.getter(#isMixableOutside),
        returnValue: false,
      ) as bool);

  @override
  bool get isMixinApplication => (super.noSuchMethod(
        Invocation.getter(#isMixinApplication),
        returnValue: false,
      ) as bool);

  @override
  bool get isMixinClass => (super.noSuchMethod(
        Invocation.getter(#isMixinClass),
        returnValue: false,
      ) as bool);

  @override
  bool get isSealed => (super.noSuchMethod(
        Invocation.getter(#isSealed),
        returnValue: false,
      ) as bool);

  @override
  bool get isValidMixin => (super.noSuchMethod(
        Invocation.getter(#isValidMixin),
        returnValue: false,
      ) as bool);

  @override
  List<_i3.InterfaceType> get allSupertypes => (super.noSuchMethod(
        Invocation.getter(#allSupertypes),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i2.ConstructorElement> get constructors => (super.noSuchMethod(
        Invocation.getter(#constructors),
        returnValue: <_i2.ConstructorElement>[],
      ) as List<_i2.ConstructorElement>);

  @override
  List<_i2.ConstructorElement> get constructors2 => (super.noSuchMethod(
        Invocation.getter(#constructors2),
        returnValue: <_i2.ConstructorElement>[],
      ) as List<_i2.ConstructorElement>);

  @override
  Map<_i9.Name, _i2.ExecutableElement> get inheritedConcreteMembers =>
      (super.noSuchMethod(
        Invocation.getter(#inheritedConcreteMembers),
        returnValue: <_i9.Name, _i2.ExecutableElement>{},
      ) as Map<_i9.Name, _i2.ExecutableElement>);

  @override
  Map<_i9.Name, _i2.ExecutableElement> get inheritedMembers =>
      (super.noSuchMethod(
        Invocation.getter(#inheritedMembers),
        returnValue: <_i9.Name, _i2.ExecutableElement>{},
      ) as Map<_i9.Name, _i2.ExecutableElement>);

  @override
  Map<_i9.Name, _i2.ExecutableElement> get interfaceMembers =>
      (super.noSuchMethod(
        Invocation.getter(#interfaceMembers),
        returnValue: <_i9.Name, _i2.ExecutableElement>{},
      ) as Map<_i9.Name, _i2.ExecutableElement>);

  @override
  List<_i3.InterfaceType> get interfaces => (super.noSuchMethod(
        Invocation.getter(#interfaces),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i3.InterfaceType> get mixins => (super.noSuchMethod(
        Invocation.getter(#mixins),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  _i3.InterfaceType get thisType => (super.noSuchMethod(
        Invocation.getter(#thisType),
        returnValue: _FakeInterfaceType_10(
          this,
          Invocation.getter(#thisType),
        ),
      ) as _i3.InterfaceType);

  @override
  _i2.InstanceElement get baseElement => (super.noSuchMethod(
        Invocation.getter(#baseElement),
        returnValue: _FakeInstanceElement_1(
          this,
          Invocation.getter(#baseElement),
        ),
      ) as _i2.InstanceElement);

  @override
  _i2.LibraryElement get enclosingElement => (super.noSuchMethod(
        Invocation.getter(#enclosingElement),
        returnValue: _FakeLibraryElement_3(
          this,
          Invocation.getter(#enclosingElement),
        ),
      ) as _i2.LibraryElement);

  @override
  _i2.LibraryElement get enclosingElement2 => (super.noSuchMethod(
        Invocation.getter(#enclosingElement2),
        returnValue: _FakeLibraryElement_3(
          this,
          Invocation.getter(#enclosingElement2),
        ),
      ) as _i2.LibraryElement);

  @override
  List<_i2.FieldElement> get fields => (super.noSuchMethod(
        Invocation.getter(#fields),
        returnValue: <_i2.FieldElement>[],
      ) as List<_i2.FieldElement>);

  @override
  List<_i2.FieldElement> get fields2 => (super.noSuchMethod(
        Invocation.getter(#fields2),
        returnValue: <_i2.FieldElement>[],
      ) as List<_i2.FieldElement>);

  @override
  List<_i2.GetterElement> get getters => (super.noSuchMethod(
        Invocation.getter(#getters),
        returnValue: <_i2.GetterElement>[],
      ) as List<_i2.GetterElement>);

  @override
  List<_i2.GetterElement> get getters2 => (super.noSuchMethod(
        Invocation.getter(#getters2),
        returnValue: <_i2.GetterElement>[],
      ) as List<_i2.GetterElement>);

  @override
  List<_i2.MethodElement> get methods => (super.noSuchMethod(
        Invocation.getter(#methods),
        returnValue: <_i2.MethodElement>[],
      ) as List<_i2.MethodElement>);

  @override
  List<_i2.MethodElement> get methods2 => (super.noSuchMethod(
        Invocation.getter(#methods2),
        returnValue: <_i2.MethodElement>[],
      ) as List<_i2.MethodElement>);

  @override
  List<_i2.SetterElement> get setters => (super.noSuchMethod(
        Invocation.getter(#setters),
        returnValue: <_i2.SetterElement>[],
      ) as List<_i2.SetterElement>);

  @override
  List<_i2.SetterElement> get setters2 => (super.noSuchMethod(
        Invocation.getter(#setters2),
        returnValue: <_i2.SetterElement>[],
      ) as List<_i2.SetterElement>);

  @override
  List<_i2.Element> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i2.Element>[],
      ) as List<_i2.Element>);

  @override
  List<_i2.Element> get children2 => (super.noSuchMethod(
        Invocation.getter(#children2),
        returnValue: <_i2.Element>[],
      ) as List<_i2.Element>);

  @override
  String get displayName => (super.noSuchMethod(
        Invocation.getter(#displayName),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#displayName),
        ),
      ) as String);

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);

  @override
  bool get isPrivate => (super.noSuchMethod(
        Invocation.getter(#isPrivate),
        returnValue: false,
      ) as bool);

  @override
  bool get isPublic => (super.noSuchMethod(
        Invocation.getter(#isPublic),
        returnValue: false,
      ) as bool);

  @override
  bool get isSynthetic => (super.noSuchMethod(
        Invocation.getter(#isSynthetic),
        returnValue: false,
      ) as bool);

  @override
  _i2.ElementKind get kind => (super.noSuchMethod(
        Invocation.getter(#kind),
        returnValue: _FakeElementKind_5(
          this,
          Invocation.getter(#kind),
        ),
      ) as _i2.ElementKind);

  @override
  _i2.LibraryElement get library => (super.noSuchMethod(
        Invocation.getter(#library),
        returnValue: _FakeLibraryElement_3(
          this,
          Invocation.getter(#library),
        ),
      ) as _i2.LibraryElement);

  @override
  _i2.LibraryElement get library2 => (super.noSuchMethod(
        Invocation.getter(#library2),
        returnValue: _FakeLibraryElement_3(
          this,
          Invocation.getter(#library2),
        ),
      ) as _i2.LibraryElement);

  @override
  _i2.Metadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeMetadata_6(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i2.Metadata);

  @override
  _i2.Element get nonSynthetic => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic),
        returnValue: _FakeElement_7(
          this,
          Invocation.getter(#nonSynthetic),
        ),
      ) as _i2.Element);

  @override
  _i2.Element get nonSynthetic2 => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic2),
        returnValue: _FakeElement_7(
          this,
          Invocation.getter(#nonSynthetic2),
        ),
      ) as _i2.Element);

  @override
  _i2.Metadata get metadata2 => (super.noSuchMethod(
        Invocation.getter(#metadata2),
        returnValue: _FakeMetadata_6(
          this,
          Invocation.getter(#metadata2),
        ),
      ) as _i2.Metadata);

  @override
  bool get isSimplyBounded => (super.noSuchMethod(
        Invocation.getter(#isSimplyBounded),
        returnValue: false,
      ) as bool);

  @override
  List<_i2.TypeParameterElement> get typeParameters => (super.noSuchMethod(
        Invocation.getter(#typeParameters),
        returnValue: <_i2.TypeParameterElement>[],
      ) as List<_i2.TypeParameterElement>);

  @override
  List<_i2.TypeParameterElement> get typeParameters2 => (super.noSuchMethod(
        Invocation.getter(#typeParameters2),
        returnValue: <_i2.TypeParameterElement>[],
      ) as List<_i2.TypeParameterElement>);

  @override
  bool isExtendableIn(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isExtendableIn,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isExtendableIn2(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isExtendableIn2,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isImplementableIn(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isImplementableIn,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isImplementableIn2(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isImplementableIn2,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isMixableIn(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isMixableIn,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isMixableIn2(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isMixableIn2,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.ExecutableElement? getInheritedConcreteMember(_i9.Name? name) =>
      (super.noSuchMethod(Invocation.method(
        #getInheritedConcreteMember,
        [name],
      )) as _i2.ExecutableElement?);

  @override
  _i2.ExecutableElement? getInheritedMember(_i9.Name? name) =>
      (super.noSuchMethod(Invocation.method(
        #getInheritedMember,
        [name],
      )) as _i2.ExecutableElement?);

  @override
  _i2.ExecutableElement? getInterfaceMember(_i9.Name? name) =>
      (super.noSuchMethod(Invocation.method(
        #getInterfaceMember,
        [name],
      )) as _i2.ExecutableElement?);

  @override
  _i2.ConstructorElement? getNamedConstructor(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getNamedConstructor,
        [name],
      )) as _i2.ConstructorElement?);

  @override
  _i2.ConstructorElement? getNamedConstructor2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getNamedConstructor2,
        [name],
      )) as _i2.ConstructorElement?);

  @override
  List<_i2.ExecutableElement>? getOverridden(_i9.Name? name) =>
      (super.noSuchMethod(Invocation.method(
        #getOverridden,
        [name],
      )) as List<_i2.ExecutableElement>?);

  @override
  _i3.InterfaceType instantiate({
    required List<_i3.DartType>? typeArguments,
    required _i6.NullabilitySuffix? nullabilitySuffix,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #instantiate,
          [],
          {
            #typeArguments: typeArguments,
            #nullabilitySuffix: nullabilitySuffix,
          },
        ),
        returnValue: _FakeInterfaceType_10(
          this,
          Invocation.method(
            #instantiate,
            [],
            {
              #typeArguments: typeArguments,
              #nullabilitySuffix: nullabilitySuffix,
            },
          ),
        ),
      ) as _i3.InterfaceType);

  @override
  _i2.MethodElement? lookUpConcreteMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpConcreteMethod,
        [
          methodName,
          library,
        ],
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpInheritedMethod({
    required String? methodName,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpInheritedMethod,
        [],
        {
          #methodName: methodName,
          #library: library,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpInheritedMethod2({
    required String? methodName,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpInheritedMethod2,
        [],
        {
          #methodName: methodName,
          #library: library,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.FieldElement? getField(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getField,
        [name],
      )) as _i2.FieldElement?);

  @override
  _i2.FieldElement? getField2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getField2,
        [name],
      )) as _i2.FieldElement?);

  @override
  _i2.GetterElement? getGetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter,
        [name],
      )) as _i2.GetterElement?);

  @override
  _i2.GetterElement? getGetter2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter2,
        [name],
      )) as _i2.GetterElement?);

  @override
  _i2.MethodElement? getMethod(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod,
        [name],
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? getMethod2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod2,
        [name],
      )) as _i2.MethodElement?);

  @override
  _i2.SetterElement? getSetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter,
        [name],
      )) as _i2.SetterElement?);

  @override
  _i2.SetterElement? getSetter2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter2,
        [name],
      )) as _i2.SetterElement?);

  @override
  _i2.GetterElement? lookUpGetter({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.GetterElement?);

  @override
  _i2.GetterElement? lookUpGetter2({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter2,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.GetterElement?);

  @override
  _i2.MethodElement? lookUpMethod({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpMethod2({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod2,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.SetterElement? lookUpSetter({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.SetterElement?);

  @override
  _i2.SetterElement? lookUpSetter2({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter2,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.SetterElement?);

  @override
  T? accept<T>(_i2.ElementVisitor2<T>? visitor) =>
      (super.noSuchMethod(Invocation.method(
        #accept,
        [visitor],
      )) as T?);

  @override
  T? accept2<T>(_i2.ElementVisitor2<T>? visitor) =>
      (super.noSuchMethod(Invocation.method(
        #accept2,
        [visitor],
      )) as T?);

  @override
  String displayString({
    bool? multiline = false,
    bool? preferTypeAlias = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #displayString,
          [],
          {
            #multiline: multiline,
            #preferTypeAlias: preferTypeAlias,
          },
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #displayString,
            [],
            {
              #multiline: multiline,
              #preferTypeAlias: preferTypeAlias,
            },
          ),
        ),
      ) as String);

  @override
  String displayString2({
    bool? multiline = false,
    bool? preferTypeAlias = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #displayString2,
          [],
          {
            #multiline: multiline,
            #preferTypeAlias: preferTypeAlias,
          },
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #displayString2,
            [],
            {
              #multiline: multiline,
              #preferTypeAlias: preferTypeAlias,
            },
          ),
        ),
      ) as String);

  @override
  String getExtendedDisplayName({String? shortName}) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName,
          [],
          {#shortName: shortName},
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getExtendedDisplayName,
            [],
            {#shortName: shortName},
          ),
        ),
      ) as String);

  @override
  String getExtendedDisplayName2({String? shortName}) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName2,
          [],
          {#shortName: shortName},
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getExtendedDisplayName2,
            [],
            {#shortName: shortName},
          ),
        ),
      ) as String);

  @override
  bool isAccessibleIn(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAccessibleIn2(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn2,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.Element? thisOrAncestorMatching(bool Function(_i2.Element)? predicate) =>
      (super.noSuchMethod(Invocation.method(
        #thisOrAncestorMatching,
        [predicate],
      )) as _i2.Element?);

  @override
  _i2.Element? thisOrAncestorMatching2(bool Function(_i2.Element)? predicate) =>
      (super.noSuchMethod(Invocation.method(
        #thisOrAncestorMatching2,
        [predicate],
      )) as _i2.Element?);

  @override
  void visitChildren<T>(_i2.ElementVisitor2<T>? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildren,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildren2<T>(_i2.ElementVisitor2<T>? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildren2,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [InterfaceType].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterfaceType extends _i1.Mock implements _i3.InterfaceType {
  MockInterfaceType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.InterfaceType> get allSupertypes => (super.noSuchMethod(
        Invocation.getter(#allSupertypes),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i2.ConstructorElement> get constructors => (super.noSuchMethod(
        Invocation.getter(#constructors),
        returnValue: <_i2.ConstructorElement>[],
      ) as List<_i2.ConstructorElement>);

  @override
  List<_i2.ConstructorElement> get constructors2 => (super.noSuchMethod(
        Invocation.getter(#constructors2),
        returnValue: <_i2.ConstructorElement>[],
      ) as List<_i2.ConstructorElement>);

  @override
  _i2.InterfaceElement get element => (super.noSuchMethod(
        Invocation.getter(#element),
        returnValue: _FakeInterfaceElement_11(
          this,
          Invocation.getter(#element),
        ),
      ) as _i2.InterfaceElement);

  @override
  _i2.InterfaceElement get element3 => (super.noSuchMethod(
        Invocation.getter(#element3),
        returnValue: _FakeInterfaceElement_11(
          this,
          Invocation.getter(#element3),
        ),
      ) as _i2.InterfaceElement);

  @override
  List<_i2.GetterElement> get getters => (super.noSuchMethod(
        Invocation.getter(#getters),
        returnValue: <_i2.GetterElement>[],
      ) as List<_i2.GetterElement>);

  @override
  List<_i3.InterfaceType> get interfaces => (super.noSuchMethod(
        Invocation.getter(#interfaces),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i2.MethodElement> get methods => (super.noSuchMethod(
        Invocation.getter(#methods),
        returnValue: <_i2.MethodElement>[],
      ) as List<_i2.MethodElement>);

  @override
  List<_i2.MethodElement> get methods2 => (super.noSuchMethod(
        Invocation.getter(#methods2),
        returnValue: <_i2.MethodElement>[],
      ) as List<_i2.MethodElement>);

  @override
  List<_i3.InterfaceType> get mixins => (super.noSuchMethod(
        Invocation.getter(#mixins),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i2.SetterElement> get setters => (super.noSuchMethod(
        Invocation.getter(#setters),
        returnValue: <_i2.SetterElement>[],
      ) as List<_i2.SetterElement>);

  @override
  List<_i3.InterfaceType> get superclassConstraints => (super.noSuchMethod(
        Invocation.getter(#superclassConstraints),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i3.DartType> get typeArguments => (super.noSuchMethod(
        Invocation.getter(#typeArguments),
        returnValue: <_i3.DartType>[],
      ) as List<_i3.DartType>);

  @override
  _i3.DartType get extensionTypeErasure => (super.noSuchMethod(
        Invocation.getter(#extensionTypeErasure),
        returnValue: _FakeDartType_4(
          this,
          Invocation.getter(#extensionTypeErasure),
        ),
      ) as _i3.DartType);

  @override
  bool get isBottom => (super.noSuchMethod(
        Invocation.getter(#isBottom),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncFuture => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFuture),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncFutureOr => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFutureOr),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncStream => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncStream),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreBool => (super.noSuchMethod(
        Invocation.getter(#isDartCoreBool),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreDouble => (super.noSuchMethod(
        Invocation.getter(#isDartCoreDouble),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreEnum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreEnum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreFunction => (super.noSuchMethod(
        Invocation.getter(#isDartCoreFunction),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreInt => (super.noSuchMethod(
        Invocation.getter(#isDartCoreInt),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreIterable => (super.noSuchMethod(
        Invocation.getter(#isDartCoreIterable),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreList => (super.noSuchMethod(
        Invocation.getter(#isDartCoreList),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreMap => (super.noSuchMethod(
        Invocation.getter(#isDartCoreMap),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreNull => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNull),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreNum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreObject => (super.noSuchMethod(
        Invocation.getter(#isDartCoreObject),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreRecord => (super.noSuchMethod(
        Invocation.getter(#isDartCoreRecord),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreSet => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSet),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreString => (super.noSuchMethod(
        Invocation.getter(#isDartCoreString),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreSymbol => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSymbol),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreType => (super.noSuchMethod(
        Invocation.getter(#isDartCoreType),
        returnValue: false,
      ) as bool);

  @override
  _i6.NullabilitySuffix get nullabilitySuffix => (super.noSuchMethod(
        Invocation.getter(#nullabilitySuffix),
        returnValue: _i6.NullabilitySuffix.question,
      ) as _i6.NullabilitySuffix);

  @override
  _i2.GetterElement? getGetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter,
        [name],
      )) as _i2.GetterElement?);

  @override
  _i2.GetterElement? getGetter2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter2,
        [name],
      )) as _i2.GetterElement?);

  @override
  _i2.MethodElement? getMethod(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod,
        [name],
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? getMethod2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod2,
        [name],
      )) as _i2.MethodElement?);

  @override
  _i2.SetterElement? getSetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter,
        [name],
      )) as _i2.SetterElement?);

  @override
  _i2.SetterElement? getSetter2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter2,
        [name],
      )) as _i2.SetterElement?);

  @override
  _i2.ConstructorElement? lookUpConstructor(
    String? name,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpConstructor,
        [
          name,
          library,
        ],
      )) as _i2.ConstructorElement?);

  @override
  _i2.ConstructorElement? lookUpConstructor2(
    String? name,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpConstructor2,
        [
          name,
          library,
        ],
      )) as _i2.ConstructorElement?);

  @override
  _i2.GetterElement? lookUpGetter(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.GetterElement?);

  @override
  _i2.GetterElement? lookUpGetter3(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter3,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.GetterElement?);

  @override
  _i2.MethodElement? lookUpMethod(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpMethod3(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod3,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.SetterElement? lookUpSetter(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.SetterElement?);

  @override
  _i2.SetterElement? lookUpSetter3(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter3,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.SetterElement?);

  @override
  R accept<R>(_i7.TypeVisitor<R>? visitor) => (super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValue: _i4.dummyValue<R>(
          this,
          Invocation.method(
            #accept,
            [visitor],
          ),
        ),
      ) as R);

  @override
  R acceptWithArgument<R, A>(
    _i7.TypeVisitorWithArgument<R, A>? visitor,
    A? argument,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptWithArgument,
          [
            visitor,
            argument,
          ],
        ),
        returnValue: _i4.dummyValue<R>(
          this,
          Invocation.method(
            #acceptWithArgument,
            [
              visitor,
              argument,
            ],
          ),
        ),
      ) as R);

  @override
  _i3.InterfaceType? asInstanceOf(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf,
        [element],
      )) as _i3.InterfaceType?);

  @override
  _i3.InterfaceType? asInstanceOf2(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf2,
        [element],
      )) as _i3.InterfaceType?);

  @override
  String getDisplayString({bool? withNullability = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {#withNullability: withNullability},
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayString,
            [],
            {#withNullability: withNullability},
          ),
        ),
      ) as String);
}
