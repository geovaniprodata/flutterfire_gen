// Mocks generated by Mockito 5.4.6 from annotations
// in flutterfire_gen/test/parser/to_json_field_parser_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:analyzer/dart/element/element.dart' as _i2;
import 'package:analyzer/dart/element/nullability_suffix.dart' as _i4;
import 'package:analyzer/dart/element/type.dart' as _i3;
import 'package:analyzer/dart/element/type_visitor.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeInterfaceElement_0 extends _i1.SmartFake
    implements _i2.InterfaceElement {
  _FakeInterfaceElement_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDartType_1 extends _i1.SmartFake implements _i3.DartType {
  _FakeDartType_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterfaceFragment_2 extends _i1.SmartFake
    implements _i2.InterfaceFragment {
  _FakeInterfaceFragment_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterfaceType_3 extends _i1.SmartFake implements _i3.InterfaceType {
  _FakeInterfaceType_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInstanceElement_4 extends _i1.SmartFake
    implements _i2.InstanceElement {
  _FakeInstanceElement_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLibraryElement_5 extends _i1.SmartFake
    implements _i2.LibraryElement {
  _FakeLibraryElement_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElementKind_6 extends _i1.SmartFake implements _i2.ElementKind {
  _FakeElementKind_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMetadata_7 extends _i1.SmartFake implements _i2.Metadata {
  _FakeMetadata_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElement_8 extends _i1.SmartFake implements _i2.Element {
  _FakeElement_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InterfaceType].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterfaceType extends _i1.Mock implements _i3.InterfaceType {
  MockInterfaceType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.InterfaceType> get allSupertypes => (super.noSuchMethod(
        Invocation.getter(#allSupertypes),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i2.ConstructorElement> get constructors => (super.noSuchMethod(
        Invocation.getter(#constructors),
        returnValue: <_i2.ConstructorElement>[],
      ) as List<_i2.ConstructorElement>);

  @override
  List<_i2.ConstructorElement> get constructors2 => (super.noSuchMethod(
        Invocation.getter(#constructors2),
        returnValue: <_i2.ConstructorElement>[],
      ) as List<_i2.ConstructorElement>);

  @override
  _i2.InterfaceElement get element => (super.noSuchMethod(
        Invocation.getter(#element),
        returnValue: _FakeInterfaceElement_0(
          this,
          Invocation.getter(#element),
        ),
      ) as _i2.InterfaceElement);

  @override
  _i2.InterfaceElement get element3 => (super.noSuchMethod(
        Invocation.getter(#element3),
        returnValue: _FakeInterfaceElement_0(
          this,
          Invocation.getter(#element3),
        ),
      ) as _i2.InterfaceElement);

  @override
  List<_i2.GetterElement> get getters => (super.noSuchMethod(
        Invocation.getter(#getters),
        returnValue: <_i2.GetterElement>[],
      ) as List<_i2.GetterElement>);

  @override
  List<_i3.InterfaceType> get interfaces => (super.noSuchMethod(
        Invocation.getter(#interfaces),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i2.MethodElement> get methods => (super.noSuchMethod(
        Invocation.getter(#methods),
        returnValue: <_i2.MethodElement>[],
      ) as List<_i2.MethodElement>);

  @override
  List<_i2.MethodElement> get methods2 => (super.noSuchMethod(
        Invocation.getter(#methods2),
        returnValue: <_i2.MethodElement>[],
      ) as List<_i2.MethodElement>);

  @override
  List<_i3.InterfaceType> get mixins => (super.noSuchMethod(
        Invocation.getter(#mixins),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i2.SetterElement> get setters => (super.noSuchMethod(
        Invocation.getter(#setters),
        returnValue: <_i2.SetterElement>[],
      ) as List<_i2.SetterElement>);

  @override
  List<_i3.InterfaceType> get superclassConstraints => (super.noSuchMethod(
        Invocation.getter(#superclassConstraints),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i3.DartType> get typeArguments => (super.noSuchMethod(
        Invocation.getter(#typeArguments),
        returnValue: <_i3.DartType>[],
      ) as List<_i3.DartType>);

  @override
  _i3.DartType get extensionTypeErasure => (super.noSuchMethod(
        Invocation.getter(#extensionTypeErasure),
        returnValue: _FakeDartType_1(
          this,
          Invocation.getter(#extensionTypeErasure),
        ),
      ) as _i3.DartType);

  @override
  bool get isBottom => (super.noSuchMethod(
        Invocation.getter(#isBottom),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncFuture => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFuture),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncFutureOr => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFutureOr),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncStream => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncStream),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreBool => (super.noSuchMethod(
        Invocation.getter(#isDartCoreBool),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreDouble => (super.noSuchMethod(
        Invocation.getter(#isDartCoreDouble),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreEnum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreEnum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreFunction => (super.noSuchMethod(
        Invocation.getter(#isDartCoreFunction),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreInt => (super.noSuchMethod(
        Invocation.getter(#isDartCoreInt),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreIterable => (super.noSuchMethod(
        Invocation.getter(#isDartCoreIterable),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreList => (super.noSuchMethod(
        Invocation.getter(#isDartCoreList),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreMap => (super.noSuchMethod(
        Invocation.getter(#isDartCoreMap),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreNull => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNull),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreNum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreObject => (super.noSuchMethod(
        Invocation.getter(#isDartCoreObject),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreRecord => (super.noSuchMethod(
        Invocation.getter(#isDartCoreRecord),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreSet => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSet),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreString => (super.noSuchMethod(
        Invocation.getter(#isDartCoreString),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreSymbol => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSymbol),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreType => (super.noSuchMethod(
        Invocation.getter(#isDartCoreType),
        returnValue: false,
      ) as bool);

  @override
  _i4.NullabilitySuffix get nullabilitySuffix => (super.noSuchMethod(
        Invocation.getter(#nullabilitySuffix),
        returnValue: _i4.NullabilitySuffix.question,
      ) as _i4.NullabilitySuffix);

  @override
  _i2.GetterElement? getGetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter,
        [name],
      )) as _i2.GetterElement?);

  @override
  _i2.GetterElement? getGetter2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter2,
        [name],
      )) as _i2.GetterElement?);

  @override
  _i2.MethodElement? getMethod(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod,
        [name],
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? getMethod2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod2,
        [name],
      )) as _i2.MethodElement?);

  @override
  _i2.SetterElement? getSetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter,
        [name],
      )) as _i2.SetterElement?);

  @override
  _i2.SetterElement? getSetter2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter2,
        [name],
      )) as _i2.SetterElement?);

  @override
  _i2.ConstructorElement? lookUpConstructor(
    String? name,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpConstructor,
        [
          name,
          library,
        ],
      )) as _i2.ConstructorElement?);

  @override
  _i2.ConstructorElement? lookUpConstructor2(
    String? name,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpConstructor2,
        [
          name,
          library,
        ],
      )) as _i2.ConstructorElement?);

  @override
  _i2.GetterElement? lookUpGetter(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.GetterElement?);

  @override
  _i2.GetterElement? lookUpGetter3(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter3,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.GetterElement?);

  @override
  _i2.MethodElement? lookUpMethod(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpMethod3(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod3,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.SetterElement? lookUpSetter(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.SetterElement?);

  @override
  _i2.SetterElement? lookUpSetter3(
    String? name,
    _i2.LibraryElement? library, {
    bool? concrete = false,
    bool? inherited = false,
    bool? recoveryStatic = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter3,
        [
          name,
          library,
        ],
        {
          #concrete: concrete,
          #inherited: inherited,
          #recoveryStatic: recoveryStatic,
        },
      )) as _i2.SetterElement?);

  @override
  R accept<R>(_i5.TypeVisitor<R>? visitor) => (super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValue: _i6.dummyValue<R>(
          this,
          Invocation.method(
            #accept,
            [visitor],
          ),
        ),
      ) as R);

  @override
  R acceptWithArgument<R, A>(
    _i5.TypeVisitorWithArgument<R, A>? visitor,
    A? argument,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptWithArgument,
          [
            visitor,
            argument,
          ],
        ),
        returnValue: _i6.dummyValue<R>(
          this,
          Invocation.method(
            #acceptWithArgument,
            [
              visitor,
              argument,
            ],
          ),
        ),
      ) as R);

  @override
  _i3.InterfaceType? asInstanceOf(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf,
        [element],
      )) as _i3.InterfaceType?);

  @override
  _i3.InterfaceType? asInstanceOf2(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf2,
        [element],
      )) as _i3.InterfaceType?);

  @override
  String getDisplayString({bool? withNullability = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {#withNullability: withNullability},
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayString,
            [],
            {#withNullability: withNullability},
          ),
        ),
      ) as String);
}

/// A class which mocks [InterfaceElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterfaceElement extends _i1.Mock implements _i2.InterfaceElement {
  MockInterfaceElement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.InterfaceType> get allSupertypes => (super.noSuchMethod(
        Invocation.getter(#allSupertypes),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i2.ConstructorElement> get constructors => (super.noSuchMethod(
        Invocation.getter(#constructors),
        returnValue: <_i2.ConstructorElement>[],
      ) as List<_i2.ConstructorElement>);

  @override
  List<_i2.ConstructorElement> get constructors2 => (super.noSuchMethod(
        Invocation.getter(#constructors2),
        returnValue: <_i2.ConstructorElement>[],
      ) as List<_i2.ConstructorElement>);

  @override
  _i2.InterfaceFragment get firstFragment => (super.noSuchMethod(
        Invocation.getter(#firstFragment),
        returnValue: _FakeInterfaceFragment_2(
          this,
          Invocation.getter(#firstFragment),
        ),
      ) as _i2.InterfaceFragment);

  @override
  List<_i2.InterfaceFragment> get fragments => (super.noSuchMethod(
        Invocation.getter(#fragments),
        returnValue: <_i2.InterfaceFragment>[],
      ) as List<_i2.InterfaceFragment>);

  @override
  Map<_i2.Name, _i2.ExecutableElement> get inheritedConcreteMembers =>
      (super.noSuchMethod(
        Invocation.getter(#inheritedConcreteMembers),
        returnValue: <_i2.Name, _i2.ExecutableElement>{},
      ) as Map<_i2.Name, _i2.ExecutableElement>);

  @override
  Map<_i2.Name, _i2.ExecutableElement> get inheritedMembers =>
      (super.noSuchMethod(
        Invocation.getter(#inheritedMembers),
        returnValue: <_i2.Name, _i2.ExecutableElement>{},
      ) as Map<_i2.Name, _i2.ExecutableElement>);

  @override
  Map<_i2.Name, _i2.ExecutableElement> get interfaceMembers =>
      (super.noSuchMethod(
        Invocation.getter(#interfaceMembers),
        returnValue: <_i2.Name, _i2.ExecutableElement>{},
      ) as Map<_i2.Name, _i2.ExecutableElement>);

  @override
  List<_i3.InterfaceType> get interfaces => (super.noSuchMethod(
        Invocation.getter(#interfaces),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  List<_i3.InterfaceType> get mixins => (super.noSuchMethod(
        Invocation.getter(#mixins),
        returnValue: <_i3.InterfaceType>[],
      ) as List<_i3.InterfaceType>);

  @override
  _i3.InterfaceType get thisType => (super.noSuchMethod(
        Invocation.getter(#thisType),
        returnValue: _FakeInterfaceType_3(
          this,
          Invocation.getter(#thisType),
        ),
      ) as _i3.InterfaceType);

  @override
  _i2.InstanceElement get baseElement => (super.noSuchMethod(
        Invocation.getter(#baseElement),
        returnValue: _FakeInstanceElement_4(
          this,
          Invocation.getter(#baseElement),
        ),
      ) as _i2.InstanceElement);

  @override
  _i2.LibraryElement get enclosingElement => (super.noSuchMethod(
        Invocation.getter(#enclosingElement),
        returnValue: _FakeLibraryElement_5(
          this,
          Invocation.getter(#enclosingElement),
        ),
      ) as _i2.LibraryElement);

  @override
  _i2.LibraryElement get enclosingElement2 => (super.noSuchMethod(
        Invocation.getter(#enclosingElement2),
        returnValue: _FakeLibraryElement_5(
          this,
          Invocation.getter(#enclosingElement2),
        ),
      ) as _i2.LibraryElement);

  @override
  List<_i2.FieldElement> get fields => (super.noSuchMethod(
        Invocation.getter(#fields),
        returnValue: <_i2.FieldElement>[],
      ) as List<_i2.FieldElement>);

  @override
  List<_i2.FieldElement> get fields2 => (super.noSuchMethod(
        Invocation.getter(#fields2),
        returnValue: <_i2.FieldElement>[],
      ) as List<_i2.FieldElement>);

  @override
  List<_i2.GetterElement> get getters => (super.noSuchMethod(
        Invocation.getter(#getters),
        returnValue: <_i2.GetterElement>[],
      ) as List<_i2.GetterElement>);

  @override
  List<_i2.GetterElement> get getters2 => (super.noSuchMethod(
        Invocation.getter(#getters2),
        returnValue: <_i2.GetterElement>[],
      ) as List<_i2.GetterElement>);

  @override
  List<_i2.MethodElement> get methods => (super.noSuchMethod(
        Invocation.getter(#methods),
        returnValue: <_i2.MethodElement>[],
      ) as List<_i2.MethodElement>);

  @override
  List<_i2.MethodElement> get methods2 => (super.noSuchMethod(
        Invocation.getter(#methods2),
        returnValue: <_i2.MethodElement>[],
      ) as List<_i2.MethodElement>);

  @override
  List<_i2.SetterElement> get setters => (super.noSuchMethod(
        Invocation.getter(#setters),
        returnValue: <_i2.SetterElement>[],
      ) as List<_i2.SetterElement>);

  @override
  List<_i2.SetterElement> get setters2 => (super.noSuchMethod(
        Invocation.getter(#setters2),
        returnValue: <_i2.SetterElement>[],
      ) as List<_i2.SetterElement>);

  @override
  List<_i2.Element> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i2.Element>[],
      ) as List<_i2.Element>);

  @override
  List<_i2.Element> get children2 => (super.noSuchMethod(
        Invocation.getter(#children2),
        returnValue: <_i2.Element>[],
      ) as List<_i2.Element>);

  @override
  String get displayName => (super.noSuchMethod(
        Invocation.getter(#displayName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#displayName),
        ),
      ) as String);

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);

  @override
  bool get isPrivate => (super.noSuchMethod(
        Invocation.getter(#isPrivate),
        returnValue: false,
      ) as bool);

  @override
  bool get isPublic => (super.noSuchMethod(
        Invocation.getter(#isPublic),
        returnValue: false,
      ) as bool);

  @override
  bool get isSynthetic => (super.noSuchMethod(
        Invocation.getter(#isSynthetic),
        returnValue: false,
      ) as bool);

  @override
  _i2.ElementKind get kind => (super.noSuchMethod(
        Invocation.getter(#kind),
        returnValue: _FakeElementKind_6(
          this,
          Invocation.getter(#kind),
        ),
      ) as _i2.ElementKind);

  @override
  _i2.LibraryElement get library => (super.noSuchMethod(
        Invocation.getter(#library),
        returnValue: _FakeLibraryElement_5(
          this,
          Invocation.getter(#library),
        ),
      ) as _i2.LibraryElement);

  @override
  _i2.LibraryElement get library2 => (super.noSuchMethod(
        Invocation.getter(#library2),
        returnValue: _FakeLibraryElement_5(
          this,
          Invocation.getter(#library2),
        ),
      ) as _i2.LibraryElement);

  @override
  _i2.Metadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeMetadata_7(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i2.Metadata);

  @override
  _i2.Element get nonSynthetic => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic),
        returnValue: _FakeElement_8(
          this,
          Invocation.getter(#nonSynthetic),
        ),
      ) as _i2.Element);

  @override
  _i2.Element get nonSynthetic2 => (super.noSuchMethod(
        Invocation.getter(#nonSynthetic2),
        returnValue: _FakeElement_8(
          this,
          Invocation.getter(#nonSynthetic2),
        ),
      ) as _i2.Element);

  @override
  _i2.Metadata get metadata2 => (super.noSuchMethod(
        Invocation.getter(#metadata2),
        returnValue: _FakeMetadata_7(
          this,
          Invocation.getter(#metadata2),
        ),
      ) as _i2.Metadata);

  @override
  bool get isSimplyBounded => (super.noSuchMethod(
        Invocation.getter(#isSimplyBounded),
        returnValue: false,
      ) as bool);

  @override
  List<_i2.TypeParameterElement> get typeParameters => (super.noSuchMethod(
        Invocation.getter(#typeParameters),
        returnValue: <_i2.TypeParameterElement>[],
      ) as List<_i2.TypeParameterElement>);

  @override
  List<_i2.TypeParameterElement> get typeParameters2 => (super.noSuchMethod(
        Invocation.getter(#typeParameters2),
        returnValue: <_i2.TypeParameterElement>[],
      ) as List<_i2.TypeParameterElement>);

  @override
  _i2.ExecutableElement? getInheritedConcreteMember(_i2.Name? name) =>
      (super.noSuchMethod(Invocation.method(
        #getInheritedConcreteMember,
        [name],
      )) as _i2.ExecutableElement?);

  @override
  _i2.ExecutableElement? getInheritedMember(_i2.Name? name) =>
      (super.noSuchMethod(Invocation.method(
        #getInheritedMember,
        [name],
      )) as _i2.ExecutableElement?);

  @override
  _i2.ExecutableElement? getInterfaceMember(_i2.Name? name) =>
      (super.noSuchMethod(Invocation.method(
        #getInterfaceMember,
        [name],
      )) as _i2.ExecutableElement?);

  @override
  _i2.ConstructorElement? getNamedConstructor(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getNamedConstructor,
        [name],
      )) as _i2.ConstructorElement?);

  @override
  _i2.ConstructorElement? getNamedConstructor2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getNamedConstructor2,
        [name],
      )) as _i2.ConstructorElement?);

  @override
  List<_i2.ExecutableElement>? getOverridden(_i2.Name? name) =>
      (super.noSuchMethod(Invocation.method(
        #getOverridden,
        [name],
      )) as List<_i2.ExecutableElement>?);

  @override
  _i3.InterfaceType instantiate({
    required List<_i3.DartType>? typeArguments,
    required _i4.NullabilitySuffix? nullabilitySuffix,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #instantiate,
          [],
          {
            #typeArguments: typeArguments,
            #nullabilitySuffix: nullabilitySuffix,
          },
        ),
        returnValue: _FakeInterfaceType_3(
          this,
          Invocation.method(
            #instantiate,
            [],
            {
              #typeArguments: typeArguments,
              #nullabilitySuffix: nullabilitySuffix,
            },
          ),
        ),
      ) as _i3.InterfaceType);

  @override
  _i2.MethodElement? lookUpConcreteMethod(
    String? methodName,
    _i2.LibraryElement? library,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpConcreteMethod,
        [
          methodName,
          library,
        ],
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpInheritedMethod({
    required String? methodName,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpInheritedMethod,
        [],
        {
          #methodName: methodName,
          #library: library,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpInheritedMethod2({
    required String? methodName,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpInheritedMethod2,
        [],
        {
          #methodName: methodName,
          #library: library,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.FieldElement? getField(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getField,
        [name],
      )) as _i2.FieldElement?);

  @override
  _i2.FieldElement? getField2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getField2,
        [name],
      )) as _i2.FieldElement?);

  @override
  _i2.GetterElement? getGetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter,
        [name],
      )) as _i2.GetterElement?);

  @override
  _i2.GetterElement? getGetter2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getGetter2,
        [name],
      )) as _i2.GetterElement?);

  @override
  _i2.MethodElement? getMethod(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod,
        [name],
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? getMethod2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getMethod2,
        [name],
      )) as _i2.MethodElement?);

  @override
  _i2.SetterElement? getSetter(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter,
        [name],
      )) as _i2.SetterElement?);

  @override
  _i2.SetterElement? getSetter2(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getSetter2,
        [name],
      )) as _i2.SetterElement?);

  @override
  _i2.GetterElement? lookUpGetter({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.GetterElement?);

  @override
  _i2.GetterElement? lookUpGetter2({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpGetter2,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.GetterElement?);

  @override
  _i2.MethodElement? lookUpMethod({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.MethodElement? lookUpMethod2({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpMethod2,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.MethodElement?);

  @override
  _i2.SetterElement? lookUpSetter({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.SetterElement?);

  @override
  _i2.SetterElement? lookUpSetter2({
    required String? name,
    required _i2.LibraryElement? library,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #lookUpSetter2,
        [],
        {
          #name: name,
          #library: library,
        },
      )) as _i2.SetterElement?);

  @override
  T? accept<T>(_i2.ElementVisitor2<T>? visitor) =>
      (super.noSuchMethod(Invocation.method(
        #accept,
        [visitor],
      )) as T?);

  @override
  T? accept2<T>(_i2.ElementVisitor2<T>? visitor) =>
      (super.noSuchMethod(Invocation.method(
        #accept2,
        [visitor],
      )) as T?);

  @override
  String displayString({
    bool? multiline = false,
    bool? preferTypeAlias = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #displayString,
          [],
          {
            #multiline: multiline,
            #preferTypeAlias: preferTypeAlias,
          },
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #displayString,
            [],
            {
              #multiline: multiline,
              #preferTypeAlias: preferTypeAlias,
            },
          ),
        ),
      ) as String);

  @override
  String displayString2({
    bool? multiline = false,
    bool? preferTypeAlias = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #displayString2,
          [],
          {
            #multiline: multiline,
            #preferTypeAlias: preferTypeAlias,
          },
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #displayString2,
            [],
            {
              #multiline: multiline,
              #preferTypeAlias: preferTypeAlias,
            },
          ),
        ),
      ) as String);

  @override
  String getExtendedDisplayName({String? shortName}) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName,
          [],
          {#shortName: shortName},
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getExtendedDisplayName,
            [],
            {#shortName: shortName},
          ),
        ),
      ) as String);

  @override
  String getExtendedDisplayName2({String? shortName}) => (super.noSuchMethod(
        Invocation.method(
          #getExtendedDisplayName2,
          [],
          {#shortName: shortName},
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getExtendedDisplayName2,
            [],
            {#shortName: shortName},
          ),
        ),
      ) as String);

  @override
  bool isAccessibleIn(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAccessibleIn2(_i2.LibraryElement? library) => (super.noSuchMethod(
        Invocation.method(
          #isAccessibleIn2,
          [library],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.Element? thisOrAncestorMatching(bool Function(_i2.Element)? predicate) =>
      (super.noSuchMethod(Invocation.method(
        #thisOrAncestorMatching,
        [predicate],
      )) as _i2.Element?);

  @override
  _i2.Element? thisOrAncestorMatching2(bool Function(_i2.Element)? predicate) =>
      (super.noSuchMethod(Invocation.method(
        #thisOrAncestorMatching2,
        [predicate],
      )) as _i2.Element?);

  @override
  void visitChildren<T>(_i2.ElementVisitor2<T>? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildren,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildren2<T>(_i2.ElementVisitor2<T>? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildren2,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DynamicType].
///
/// See the documentation for Mockito's code generation for more information.
class MockDynamicType extends _i1.Mock implements _i3.DynamicType {
  MockDynamicType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DartType get extensionTypeErasure => (super.noSuchMethod(
        Invocation.getter(#extensionTypeErasure),
        returnValue: _FakeDartType_1(
          this,
          Invocation.getter(#extensionTypeErasure),
        ),
      ) as _i3.DartType);

  @override
  bool get isBottom => (super.noSuchMethod(
        Invocation.getter(#isBottom),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncFuture => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFuture),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncFutureOr => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncFutureOr),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartAsyncStream => (super.noSuchMethod(
        Invocation.getter(#isDartAsyncStream),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreBool => (super.noSuchMethod(
        Invocation.getter(#isDartCoreBool),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreDouble => (super.noSuchMethod(
        Invocation.getter(#isDartCoreDouble),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreEnum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreEnum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreFunction => (super.noSuchMethod(
        Invocation.getter(#isDartCoreFunction),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreInt => (super.noSuchMethod(
        Invocation.getter(#isDartCoreInt),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreIterable => (super.noSuchMethod(
        Invocation.getter(#isDartCoreIterable),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreList => (super.noSuchMethod(
        Invocation.getter(#isDartCoreList),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreMap => (super.noSuchMethod(
        Invocation.getter(#isDartCoreMap),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreNull => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNull),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreNum => (super.noSuchMethod(
        Invocation.getter(#isDartCoreNum),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreObject => (super.noSuchMethod(
        Invocation.getter(#isDartCoreObject),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreRecord => (super.noSuchMethod(
        Invocation.getter(#isDartCoreRecord),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreSet => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSet),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreString => (super.noSuchMethod(
        Invocation.getter(#isDartCoreString),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreSymbol => (super.noSuchMethod(
        Invocation.getter(#isDartCoreSymbol),
        returnValue: false,
      ) as bool);

  @override
  bool get isDartCoreType => (super.noSuchMethod(
        Invocation.getter(#isDartCoreType),
        returnValue: false,
      ) as bool);

  @override
  _i4.NullabilitySuffix get nullabilitySuffix => (super.noSuchMethod(
        Invocation.getter(#nullabilitySuffix),
        returnValue: _i4.NullabilitySuffix.question,
      ) as _i4.NullabilitySuffix);

  @override
  R accept<R>(_i5.TypeVisitor<R>? visitor) => (super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValue: _i6.dummyValue<R>(
          this,
          Invocation.method(
            #accept,
            [visitor],
          ),
        ),
      ) as R);

  @override
  R acceptWithArgument<R, A>(
    _i5.TypeVisitorWithArgument<R, A>? visitor,
    A? argument,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptWithArgument,
          [
            visitor,
            argument,
          ],
        ),
        returnValue: _i6.dummyValue<R>(
          this,
          Invocation.method(
            #acceptWithArgument,
            [
              visitor,
              argument,
            ],
          ),
        ),
      ) as R);

  @override
  _i3.InterfaceType? asInstanceOf(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf,
        [element],
      )) as _i3.InterfaceType?);

  @override
  _i3.InterfaceType? asInstanceOf2(_i2.InterfaceElement? element) =>
      (super.noSuchMethod(Invocation.method(
        #asInstanceOf2,
        [element],
      )) as _i3.InterfaceType?);

  @override
  String getDisplayString({bool? withNullability = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDisplayString,
          [],
          {#withNullability: withNullability},
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayString,
            [],
            {#withNullability: withNullability},
          ),
        ),
      ) as String);
}
